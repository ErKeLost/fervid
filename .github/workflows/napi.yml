name: Build NAPI
env:
  DEBUG: napi:*
  APP_NAME: napi
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  WORKING_DIR_PATH: ${{ github.workspace }}/crates/fervid_napi
  CI: true
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - master
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null

defaults:
  run:
    working-directory: './crates/fervid_napi'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              yarn build --platform --target x86_64-unknown-linux-gnu --use-napi-cross

          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: yarn build --platform --target x86_64-unknown-linux-musl -x

          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node

          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              rustup target add aarch64-apple-darwin
              yarn build --target aarch64-apple-darwin
              strip -x *.node

          # Cross-compile, taken from
          # https://github.com/napi-rs/napi-rs/blob/7f7dfab001edbfa377112b41d3c7ff28b62892d3/cli/src/api/templates/ci-template.ts
          - host: windows-latest
            target: i686-pc-windows-msvc
            build: |
              yarn build --target i686-pc-windows-msvc
              yarn test
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: yarn build --target aarch64-unknown-linux-gnu --use-napi-cross
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: yarn build --platform --target armv7-unknown-linux-gnueabihf --use-napi-cross
          # - host: ubuntu-latest
          #   target: armv7-unknown-linux-musleabihf
          #   build: yarn build --platform --target armv7-unknown-linux-musleabihf -x
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: yarn build --platform --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: yarn build --platform --target armv7-linux-androideabi
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: yarn build --platform --target aarch64-unknown-linux-musl -x
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --platform --target aarch64-pc-windows-msvc
          # - host: ubuntu-latest
          #   target: riscv64gc-unknown-linux-gnu
          #   setup: |
          #     sudo apt-get update
          #     sudo apt-get install gcc-riscv64-linux-gnu -y
          #   build: yarn build --platform --target riscv64gc-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: powerpc64le-unknown-linux-gnu
          #   setup: |
          #     sudo apt-get update
          #     sudo apt-get install gcc-powerpc64le-linux-gnu -y
          #   build: yarn build --platform --target powerpc64le-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: s390x-unknown-linux-gnu
          #   setup: |
          #     sudo apt-get update
          #     sudo apt-get install gcc-s390x-linux-gnu -y
          #   build: yarn build --platform --target s390x-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: ${wasiTargetName}
          #   build: yarn build --platform --target ${wasiTargetName}

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_PATH }}
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          # cache: yarn

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.12.0

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash

      - name: Install dependencies
        run: corepack enable; yarn install

      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          # cache: yarn
          architecture: x86

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: List directory before upload
        run: ls -a
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.WORKING_DIR_PATH }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - '18'
          - '20'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_PATH }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          # cache: yarn
      - name: Install dependencies
        run: corepack enable; yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.WORKING_DIR_PATH }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test

  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
          - '20'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_PATH }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          # cache: yarn
      - name: Install dependencies
        run: corepack enable; yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: ${{ env.WORKING_DIR_PATH }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -e CI=true -v $(pwd):/build -w /build node:${{ matrix.node }}-slim sh -c "corepack enable && yarn test"

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # cache: yarn
      - name: Install dependencies
        run: corepack enable; yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.WORKING_DIR_PATH }}/artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^@fervid/napi@[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^@fervid/napi@[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
