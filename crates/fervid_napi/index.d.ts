/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface FervidJsCompilerOptions {
  /** Apply production optimizations. Default: false */
  isProduction?: boolean
  /**
   * TODO Support SSR
   * Enable SSR. Default: false
   */
  ssr?: boolean
  /**
   * TODO Find a performant solution to source-maps
   * TODO Implement source-maps
   * Enable source maps
   */
  sourceMap?: boolean
  /** Script compilation options */
  script?: FervidJsCompilerOptionsScript
  /** Template compilation options */
  template?: FervidJsCompilerOptionsTemplate
  /** Style compilation options */
  style?: FervidJsCompilerOptionsStyle
  /**
   * TODO Regex handling logic is needed (plus sanitation)
   * TODO Implement custom element mode (low priority)
   * Transform Vue SFCs into custom elements.
   *  - `true`: all `*.vue` imports are converted into custom elements
   *  - `string | RegExp`: matched files are converted into custom elements
   * Default: files ending with `.ce.vue`
   */
  customElement?: undefined
}
export interface FervidJsCompilerOptionsTemplate {}
export interface FervidJsCompilerOptionsScript {
  /**
   * Ignored
   * Hoist <script setup> static constants.
   * - Only enabled when one `<script setup>` exists.
   * Default: true
   */
  hoistStatic?: boolean
}
export interface FervidJsCompilerOptionsStyle {
  /** Ignored */
  trim?: boolean
}
export interface CompileResult {
  code: string
  styles: Array<Style>
  errors: Array<SerializedError>
  customBlocks: Array<CustomBlock>
}
export interface Style {
  code: string
  isCompiled: boolean
  lang: string
  isScoped: boolean
}
export interface CustomBlock {
  content: string
  lo: number
  hi: number
  tagName: string
}
export interface SerializedError {
  lo: number
  hi: number
  message: string
}
export type FervidJsCompiler = Compiler
/** Fervid: a compiler for Vue.js written in Rust */
export class Compiler {
  isProduction: boolean
  ssr: boolean
  sourceMap: boolean
  constructor(options?: FervidJsCompilerOptions | undefined | null)
  compileSync(source: string): CompileResult
  compileAsync(source: string, signal?: AbortSignal | undefined | null): Promise<unknown>
}
